# Generated by Django 2.2.1 on 2019-05-23 23:19

import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

from ontask.dataops.formula.evaluation import get_variables

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:

# action.migrations.0014_condition_columns_update
def add_columns_to_conditions(apps, schema_editor):
    """
    Traverse all conditions in all actions of all workflows to add the many
    to many relation to the columns.

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Workflow = apps.get_model('workflow', 'Workflow')
    for workflow in Workflow.objects.all():
        for action in workflow.actions.all():
            for condition in action.conditions.all():
                # Get variable names in the formula
                col_names = get_variables(condition.formula)

                # Add the corresponding columns to the condition
                condition.columns.set(
                    workflow.columns.filter(name__in=col_names)
                )


# action.migrations.0015_condition_n_rows_selected_update
def update_n_rows_selected(apps, schema_editor):
    """
    Traverse all actions and update the number of rows selected by each
    condition

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Action = apps.get_model('action', 'Action')
    for action in Action.objects.all():
        action.update_n_rows_selected()


# action.migrations.0023_set_content_and_columns
def update_content_and_columns(apps, schema_editor):
    """
    Traverse all actions and update the content.

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return


# action.migrations.0025_auto_20180806_0742
def update_content_and_columns_2(apps, schema_editor):
    """
    Traverse all actions and update the content.

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Action = apps.get_model('action', 'Action')
    for action in Action.objects.all():
        if not action.is_out:
            continue


# action.migrations.0029_auto_20180814_1400
def change_action_type(apps, schema_editor):
    """
    Traverse all actions to change is_out = True by personal_tex
    and is_out = False by survey.

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Action = apps.get_model('action', 'Action')
    for item in Action.objects.all():
        if item.is_out:
            item.action_type = 'personal_text'
        else:
            item.action_type = 'survey'
        item.save()


# action.migrations.0031_auto_20180818_1735
def change_action_type_2(apps, schema_editor):
    """
    Traverse all actions to change json by personalized_json

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Action = apps.get_model('action', 'Action')
    for item in Action.objects.all():
        if item.action_type == 'personal_text':
            item.action_type = 'personalized_text'
            item.save()


# action.migrations.0033_auto_20180818_1800
def change_action_type_3(apps, schema_editor):
    """
    Traverse all actions to change personal_text by personalized_text

    :param apps:
    :param schema_editor:
    :return:
    """
    if schema_editor.connection.alias != 'default':
        return

    Action = apps.get_model('action', 'Action')
    for item in Action.objects.all():
        if item.action_type == 'json':
            item.action_type = 'personalized_json'
            item.save()

# action.migrations.0050_auto_20190228_1953
def create_triplets(apps, schema_editor):
    """
    Traverse every action and for every column in the columns field, transform
    it into a triplet (action, column, NULL) and insert it into the new
    ActionColumnConditionTuple table

    :param apps:
    :param schema_editor:
    :return:
    """

    Action = apps.get_model('action', 'Action')
    ActionColumnConditionTuple = apps.get_model('action',
                                                'ActionColumnConditionTuple')
    for action in Action.objects.all():
        # Processing one action
        for column in action.columns.all():
            # Processing a column
            obj, created = ActionColumnConditionTuple.objects.get_or_create(
                action=action,
                column=column,
                condition=None
            )



class Migration(migrations.Migration):

    replaces = [('action', '0001_initial'), ('action', '0002_auto_20171111_2226'), ('action', '0003_auto_20171116_1543'), ('action', '0004_auto_20171122_1540'), ('action', '0005_action_is_out'), ('action', '0006_action_columns'), ('action', '0007_auto_20171206_2221'), ('action', '0008_auto_20171209_1808'), ('action', '0009_auto_20180428_1425'), ('action', '0010_condition_n_selected_rows'), ('action', '0011_auto_20180515_2203'), ('action', '0012_remove_action_n_selected_rows'), ('action', '0013_condition_columns'), ('action', '0014_condition_columns_update'), ('action', '0015_condition_n_rows_selected_update'), ('action', '0016_auto_20180522_2146'), ('action', '0017_auto_20180523_1611'), ('action', '0018_remove_action_filter'), ('action', '0019_action_shuffle'), ('action', '0020_remove_action_shuffle'), ('action', '0021_action_shuffle'), ('action', '0022_auto_20180621_1708'), ('action', '0023_set_content_and_columns'), ('action', '0024_auto_20180630_1418'), ('action', '0025_auto_20180722_1013'), ('action', '0026_auto_20180723_1011'), ('action', '0027_auto_20180723_1019'), ('action', '0025_auto_20180806_0742'), ('action', '0028_merge_20180807_1702'), ('action', '0029_auto_20180814_1327'), ('action', '0029_auto_20180814_1400'), ('action', '0030_auto_20180818_1714'), ('action', '0031_auto_20180818_1735'), ('action', '0032_action_target_url'), ('action', '0033_auto_20180818_1800'), ('action', '0034_auto_20180819_1645'), ('action', '0035_action_last_executed'), ('action', '0036_action_last_executed_log'), ('action', '0037_remove_action_last_executed'), ('action', '0038_auto_20180826_1505'), ('action', '0039_merge_20180905_0729'), ('action', '0040_auto_20181123_1510'), ('action', '0041_auto_20181207_0539'), ('action', '0042_auto_20181212_1153'), ('action', '0043_auto_20181212_1323'), ('action', '0044_auto_20181212_1750'), ('action', '0045_columnconditionpair'), ('action', '0046_auto_20190228_1928'), ('action', '0047_columnconditionpair_action'), ('action', '0048_auto_20190228_1952'), ('action', '0049_auto_20190228_1953'), ('action', '0050_auto_20190228_1953'), ('action', '0051_auto_20190228_2005'), ('action', '0052_auto_20190228_2006'), ('action', '0053_remove_action_columns'), ('action', '0054_auto_20190318_2144'), ('action', '0055_action_nrows_all_false'), ('action', '0056_auto_20190323_1122'), ('action', '0057_action_rows_all_false'), ('action', '0058_remove_action_nrows_all_false'), ('action', '0059_auto_20190323_1336'), ('action', '0060_auto_20190430_1507'), ('action', '0061_auto_20190430_1922'), ('action', '0062_auto_20190521_1802')]

    initial = True

    dependencies = [
        ('workflow', '0024_auto_20180925_1934'),
        ('ontask', '0004_log_modified'),
        ('workflow', '0006_auto_20171125_2052'),
        ('workflow', '0001_initial'),
        ('workflow', '0022_auto_20180510_1157'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description_text', models.CharField(blank=True, default='', max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(blank=True, default='')),
                ('serve_enabled', models.BooleanField(default=False, verbose_name='URL available to users?')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='workflow.Workflow')),
                ('is_out', models.BooleanField(default=True, verbose_name='Action is provide information')),
                ('columns', models.ManyToManyField(related_name='actions_in', to='workflow.Column')),
                ('filter', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Preselect rows satisfying this condition', null=True)),
                ('active_from', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Action available from')),
                ('active_to', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Action available until')),
            ],
            options={
                'ordering': ('name',),
                'unique_together': {('name', 'workflow')},
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description_text', models.CharField(blank=True, default='', max_length=512)),
                ('formula', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('is_filter', models.BooleanField(default=False)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='action.Action')),
                ('created', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('n_rows_selected', models.IntegerField(default=-1, verbose_name='Number of rows selected')),
                ('columns', models.ManyToManyField(related_name='conditions', to='workflow.Column', verbose_name='Columns present in this condition')),
            ],
            options={
                'unique_together': {('action', 'name', 'is_filter')},
                'ordering': ('created',),
            },
        ),
        migrations.RunPython(code=add_columns_to_conditions),
        migrations.RunPython(code=update_n_rows_selected),
        migrations.RemoveField(
            model_name='action',
            name='filter',
        ),
        migrations.AddField(
            model_name='action',
            name='shuffle',
            field=models.BooleanField(default=False, verbose_name='Shuffle questions?'),
        ),
        migrations.RenameField(
            model_name='action',
            old_name='content',
            new_name='_content',
        ),
        migrations.RunPython(code=update_content_and_columns),
        migrations.RenameField(
            model_name='action',
            old_name='_content',
            new_name='content',
        ),
        migrations.AlterField(
            model_name='action',
            name='is_out',
            field=models.BooleanField(default=True, verbose_name='Action to provide personalized information'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='formula',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='formula'),
        ),
        migrations.AlterField(
            model_name='action',
            name='description_text',
            field=models.CharField(blank=True, default='', max_length=512, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='action',
            name='name',
            field=models.CharField(max_length=256, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='description_text',
            field=models.CharField(blank=True, default='', max_length=512, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='name',
            field=models.CharField(max_length=256, verbose_name='name'),
        ),
        migrations.RunPython(code=update_content_and_columns_2),
        migrations.AddField(
            model_name='action',
            name='action_type',
            field=models.CharField(choices=[('personal_text', 'Personalized text'), ('json', 'Personalized JSON'), ('survey', 'Survey'), ('todolist', 'TODO List')], default='personal_text', max_length=64),
        ),
        migrations.RunPython(code=change_action_type),
        migrations.RemoveField(
            model_name='action',
            name='is_out',
        ),
        migrations.AlterField(
            model_name='action',
            name='action_type',
            field=models.CharField(choices=[('personalized_text', 'Personalized text'), ('personalized_json', 'Personalized JSON'), ('survey', 'Survey'), ('todo_list', 'TODO List')], default='personalized_text', max_length=64),
        ),
        migrations.RunPython(code=change_action_type_2),
        migrations.AddField(
            model_name='action',
            name='target_url',
            field=models.TextField(default=''),
        ),
        migrations.RunPython(code=change_action_type_3),
        migrations.AlterField(
            model_name='action',
            name='target_url',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.AddField(
            model_name='action',
            name='last_executed_log',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ontask.Log'),
        ),
        migrations.AlterField(
            model_name='action',
            name='action_type',
            field=models.CharField(choices=[('personalized_text', 'Personalized text'), ('personalized_json', 'Personalized JSON'), ('personalized_canvas_email', 'Personalized Canvas Email'), ('survey', 'Survey'), ('todo_list', 'TODO List')], default='personalized_text', max_length=64),
        ),
        migrations.AlterField(
            model_name='action',
            name='action_type',
            field=models.CharField(choices=[('personalized_text', 'Personalized text'), ('personalized_canvas_email', 'Personalized Canvas Email'), ('survey', 'Survey'), ('personalized_json', 'Personalized JSON'), ('todo_list', 'TODO List')], default='personalized_text', max_length=64),
        ),
        migrations.AlterField(
            model_name='condition',
            name='formula',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True, verbose_name='formula'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='formula',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='formula'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='name',
            field=models.CharField(blank=True, max_length=256, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='action',
            name='columns',
            field=models.ManyToManyField(to='workflow.Column'),
        ),
        migrations.CreateModel(
            name='ActionColumnConditionTuple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column_condition_pair', to='workflow.Column')),
                ('condition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='column_condition_pair', to='action.Condition')),
                ('action', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='columns_TMP', to='action.Action')),
            ],
            options={
                'unique_together': {('action', 'column', 'condition')},
            },
        ),
        migrations.RunPython(code=create_triplets),
        migrations.AlterField(
            model_name='actioncolumnconditiontuple',
            name='action',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns_condition_pair', to='action.Action'),
        ),
        migrations.AlterField(
            model_name='actioncolumnconditiontuple',
            name='action',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column_condition_pair', to='action.Action'),
        ),
        migrations.RemoveField(
            model_name='action',
            name='columns',
        ),
        migrations.AlterModelOptions(
            name='actioncolumnconditiontuple',
            options={'ordering': ['column__position']},
        ),
        migrations.AddField(
            model_name='action',
            name='rows_all_false',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True),
        ),
        migrations.RenameField(
            model_name='action',
            old_name='content',
            new_name='text_content',
        ),
        migrations.AlterField(
            model_name='action',
            name='name',
            field=models.CharField(max_length=512, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='condition',
            name='name',
            field=models.CharField(blank=True, max_length=512, verbose_name='name'),
        ),
        migrations.AlterModelOptions(
            name='action',
            options={'ordering': ['name']},
        ),
        migrations.AlterModelOptions(
            name='condition',
            options={'ordering': ['-is_filter', 'name']},
        ),
        migrations.AlterField(
            model_name='action',
            name='target_url',
            field=models.TextField(blank=True, default=''),
        ),
    ]
